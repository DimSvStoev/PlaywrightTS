# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Endpoint /Books >> GET all Books >> has 200 response code
- Location: C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\get-books.spec.ts:35:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 404
    at C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\get-books.spec.ts:36:33
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { BaseApi } from '../src/api/base-api';
   3 | import { BooksApi } from '../src/api/books-api';
   4 | import { Endpoint, Method } from '../src/constants/api-const';
   5 |
   6 | const endpoint = Endpoint.BOOKS;
   7 |
   8 | test.describe(`Endpoint /${endpoint}`, () => {
   9 |
   10 |   // GET all books
   11 |   test.describe.only(`${Method.GET} all ${endpoint}`, () => {
   12 |     let api: BaseApi;
   13 |     let response;
   14 |     let raw: string;
   15 |     let data: any;
   16 |
   17 |     test.beforeAll(async () => {
   18 |       console.log('⏳ INIT start');
   19 |     
   20 |       api = new BaseApi();
   21 |       console.log('✅ api създаден:', typeof api);
   22 |     
   23 |       await api.initContext();
   24 |       console.log('✅ Контекст създаден');
   25 |     
   26 |       console.log('🧪 Method:', Method.GET);
   27 |       console.log('📛 endpoint:', endpoint);
   28 |     
   29 |       const config = api.buildRequestConfiguration(Method.GET, endpoint);
   30 |       console.log('⚙️ Config:', config);
   31 |     
   32 |       response = await api.sendRequest(config);
   33 |     });    
   34 |
   35 |     test('has 200 response code', async () => {
>  36 |       expect(response.status()).toBe(200);
      |                                 ^ Error: expect(received).toBe(expected) // Object.is equality
   37 |     });
   38 |
   39 |     test('has response data as a non-empty array', async () => {
   40 |       expect(Array.isArray(data)).toBe(true);
   41 |       expect(data.length).toBeGreaterThan(0);
   42 |     });
   43 |   });
   44 |
   45 |   // GET book by ID
   46 |   test.describe(`${Method.GET} ${endpoint} by ID`, () => {
   47 |     let api: BaseApi;
   48 |     let repository: BooksApi;
   49 |     let response;
   50 |     let existingBook;
   51 |
   52 |     test.beforeAll(async () => {
   53 |       api = new BaseApi();
   54 |       await api.initContext();
   55 |
   56 |       repository = new BooksApi();
   57 |       const books = repository.loadBooks();
   58 |       expect(books.length).toBeGreaterThan(0);
   59 |       existingBook = books[0];
   60 |
   61 |       const config = api.buildRequestConfiguration(Method.GET, endpoint, { id: existingBook.id });
   62 |       response = await api.sendRequest(config);
   63 |     });
   64 |
   65 |     test('has 200 response code', async () => {
   66 |       expect(response.status()).toBe(200);
   67 |     });
   68 |
   69 |     test('has all fields matching existing book', async () => {
   70 |       const data = await response.json();
   71 |       for (const key of Object.keys(existingBook)) {
   72 |         expect(data[key]).toBe(existingBook[key]);
   73 |       }
   74 |     });
   75 |   });
   76 |
   77 |   // GET book by non-existing ID
   78 |   test.describe(`${Method.GET} ${endpoint} by non-existing ID`, () => {
   79 |     let api: BaseApi;
   80 |     let response;
   81 |
   82 |     test.beforeAll(async () => {
   83 |       api = new BaseApi();
   84 |       await api.initContext();
   85 |
   86 |       const config = api.buildRequestConfiguration(Method.GET, endpoint, { id: -999 });
   87 |       response = await api.sendRequest(config);
   88 |     });
   89 |
   90 |     test('has 404 response code', async () => {
   91 |       expect(response.status()).toBe(404);
   92 |     });
   93 |   });
   94 |
   95 |   // POST create new book
   96 |   test.describe(`${Method.POST} ${endpoint}`, () => {
   97 |     let api: BaseApi;
   98 |     let repository: BooksApi;
   99 |     let response;
  100 |     let payload;
  101 |     let data;
  102 |
  103 |     test.beforeAll(async () => {
  104 |       api = new BaseApi();
  105 |       await api.initContext();
  106 |
  107 |       repository = new BooksApi();
  108 |       payload = repository.generateBookPayload();
  109 |
  110 |       const config = api.buildRequestConfiguration(Method.POST, endpoint, { payload });
  111 |       response = await api.sendRequest(config);
  112 |       data = await response.json();
  113 |     });
  114 |
  115 |     test('has 200 response code', async () => {
  116 |       expect(response.status()).toBe(200);
  117 |     });
  118 |
  119 |     test('has response data with valid id', async () => {
  120 |       expect(data.id).toBeGreaterThan(0);
  121 |     });
  122 |
  123 |     test('has response data matching payload', async () => {
  124 |       for (const key of Object.keys(payload)) {
  125 |         expect(data[key]).toBe(payload[key]);
  126 |       }
  127 |     });
  128 |   });
  129 |
  130 |   // PUT update existing book
  131 |   test.describe(`${Method.PUT} ${endpoint} by ID`, () => {
  132 |     let api: BaseApi;
  133 |     let repository: BooksApi;
  134 |     let response;
  135 |     let updatedPayload;
  136 |
```