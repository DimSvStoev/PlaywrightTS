# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Endpoint /Books >> GET all Books >> has 200 response code
- Location: C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\get-books.spec.ts:36:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 404
    at C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\get-books.spec.ts:37:33
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { BaseApi } from '../src/api/base-api';
   3 | import { BooksApi } from '../src/api/books-api';
   4 | import { Endpoint, Method } from '../src/constants/api-const';
   5 |
   6 | const endpoint = Endpoint.BOOKS;
   7 |
   8 | test.describe(`Endpoint /${endpoint}`, () => {
   9 |
   10 |   // GET all books
   11 |   test.describe(`${Method.GET} all ${endpoint}`, () => {
   12 |     let api: BaseApi;
   13 |     let response;
   14 |     let raw: string;
   15 |     let data: any;
   16 |
   17 |     test.beforeAll(async () => {
   18 |       api = new BaseApi();
   19 |       await api.initContext();
   20 |
   21 |       const config = api.buildRequestConfiguration(Method.GET, endpoint);
   22 |       response = await api.sendRequest(config);
   23 |
   24 |       raw = await response.text();
   25 |       console.log('GET all response status:', response.status());
   26 |       console.log('GET all response body (text):', raw);
   27 |
   28 |       try {
   29 |         data = JSON.parse(raw);
   30 |       } catch (e) {
   31 |         console.error('❌ Failed to parse JSON:', e);
   32 |         data = null;
   33 |       }
   34 |     });
   35 |
   36 |     test('has 200 response code', async () => {
>  37 |       expect(response.status()).toBe(200);
      |                                 ^ Error: expect(received).toBe(expected) // Object.is equality
   38 |     });
   39 |
   40 |     test('has response data as a non-empty array', async () => {
   41 |       expect(Array.isArray(data)).toBe(true);
   42 |       expect(data.length).toBeGreaterThan(0);
   43 |     });
   44 |   });
   45 |
   46 |   // GET book by ID
   47 |   test.describe(`${Method.GET} ${endpoint} by ID`, () => {
   48 |     let api: BaseApi;
   49 |     let repository: BooksApi;
   50 |     let response;
   51 |     let existingBook;
   52 |
   53 |     test.beforeAll(async () => {
   54 |       api = new BaseApi();
   55 |       await api.initContext();
   56 |
   57 |       repository = new BooksApi();
   58 |       const books = repository.loadBooks();
   59 |       expect(books.length).toBeGreaterThan(0);
   60 |       existingBook = books[0];
   61 |
   62 |       const config = api.buildRequestConfiguration(Method.GET, endpoint, { id: existingBook.id });
   63 |       response = await api.sendRequest(config);
   64 |     });
   65 |
   66 |     test('has 200 response code', async () => {
   67 |       expect(response.status()).toBe(200);
   68 |     });
   69 |
   70 |     test('has all fields matching existing book', async () => {
   71 |       const data = await response.json();
   72 |       for (const key of Object.keys(existingBook)) {
   73 |         expect(data[key]).toBe(existingBook[key]);
   74 |       }
   75 |     });
   76 |   });
   77 |
   78 |   // GET book by non-existing ID
   79 |   test.describe(`${Method.GET} ${endpoint} by non-existing ID`, () => {
   80 |     let api: BaseApi;
   81 |     let response;
   82 |
   83 |     test.beforeAll(async () => {
   84 |       api = new BaseApi();
   85 |       await api.initContext();
   86 |
   87 |       const config = api.buildRequestConfiguration(Method.GET, endpoint, { id: -999 });
   88 |       response = await api.sendRequest(config);
   89 |     });
   90 |
   91 |     test('has 404 response code', async () => {
   92 |       expect(response.status()).toBe(404);
   93 |     });
   94 |   });
   95 |
   96 |   // POST create new book
   97 |   test.describe(`${Method.POST} ${endpoint}`, () => {
   98 |     let api: BaseApi;
   99 |     let repository: BooksApi;
  100 |     let response;
  101 |     let payload;
  102 |     let data;
  103 |
  104 |     test.beforeAll(async () => {
  105 |       api = new BaseApi();
  106 |       await api.initContext();
  107 |
  108 |       repository = new BooksApi();
  109 |       payload = repository.generateBookPayload();
  110 |
  111 |       const config = api.buildRequestConfiguration(Method.POST, endpoint, { payload });
  112 |       response = await api.sendRequest(config);
  113 |       data = await response.json();
  114 |     });
  115 |
  116 |     test('has 200 response code', async () => {
  117 |       expect(response.status()).toBe(200);
  118 |     });
  119 |
  120 |     test('has response data with valid id', async () => {
  121 |       expect(data.id).toBeGreaterThan(0);
  122 |     });
  123 |
  124 |     test('has response data matching payload', async () => {
  125 |       for (const key of Object.keys(payload)) {
  126 |         expect(data[key]).toBe(payload[key]);
  127 |       }
  128 |     });
  129 |   });
  130 |
  131 |   // PUT update existing book
  132 |   test.describe(`${Method.PUT} ${endpoint} by ID`, () => {
  133 |     let api: BaseApi;
  134 |     let repository: BooksApi;
  135 |     let response;
  136 |     let updatedPayload;
  137 |
```