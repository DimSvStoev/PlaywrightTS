# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: POST Book debug
- Location: C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\get-books.spec.ts:101:5

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 400
    at C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\get-books.spec.ts:122:29
```

# Test source

```ts
   22 | //       await api.initContext();
   23 |
   24 |     
   25 | //       const config = api.buildRequestConfiguration(Method.GET, endpoint);
   26 | //       console.log('⚙️ Config:', config);
   27 |     
   28 | //       response = await api.sendRequest(config);
   29 | //       data = await response.json(); // 🔥 важно!
   30 | //       console.log('⚙️ response:', response,data);
   31 | //     });    
   32 |
   33 | //     test('has 200 response code', async () => {
   34 | //       expect(response.status()).toBe(200);
   35 | //     });
   36 |
   37 | //     test('has response data as a non-empty array', async () => {
   38 | //       expect(Array.isArray(data)).toBe(true);
   39 | //       expect(data.length).toBeGreaterThan(0);
   40 | //     });
   41 | //   });
   42 |
   43 |   // GET book by ID
   44 |   // test.describe(`${Method.GET} ${endpoint} by ID`, () => {
   45 |   //   let api: BaseApi;
   46 |   //   let repository: BooksApi;
   47 |   //   let response;
   48 |   //   let existingBook;
   49 |
   50 |   //   test.beforeAll(async () => {
   51 |   //     api = new BaseApi();
   52 |   //     await api.initContext();
   53 |
   54 |   //     repository = new BooksApi();
   55 |   //     const books = repository.loadBooks();
   56 |   //     expect(books.length).toBeGreaterThan(0);
   57 |   //     existingBook = books[0];
   58 |
   59 |   //     const config = api.buildRequestConfiguration(Method.GET, endpoint, { id: existingBook.id });
   60 |   //     response = await api.sendRequest(config);
   61 |   //   });
   62 |
   63 |   //   test('has 200 response code', async () => {
   64 |   //     expect(response.status()).toBe(200);
   65 |   //   });
   66 |
   67 |   //   test('has all fields matching existing book', async () => {
   68 |   //     const data = await response.json();
   69 |   //     for (const key of Object.keys(existingBook)) {
   70 |   //       if (key === 'id' || key==='title') {; // После може да направя датата да се подава динамично в джейсъна
   71 |   //       expect(data[key]).toBe(existingBook[key]);
   72 |   //       }
   73 |   //       const actualKeys = Object.keys(data).sort();
   74 |   //       const expectedKeys = Object.keys(existingBook).sort();
   75 |       
   76 |   //       expect(actualKeys).toEqual(expectedKeys);
   77 |   //     }
   78 |   //   });
   79 |   // });
   80 |
   81 | //   // GET book by non-existing ID
   82 | //   test.describe(`${Method.GET} ${endpoint} by non-existing ID`, () => {
   83 | //     let api: BaseApi;
   84 | //     let response;
   85 |
   86 | //     test.beforeAll(async () => {
   87 | //       api = new BaseApi();
   88 | //       await api.initContext();
   89 |
   90 | //       const config = api.buildRequestConfiguration(Method.GET, endpoint, { id: -999 });
   91 | //       response = await api.sendRequest(config);
   92 | //     });
   93 |
   94 | //     test('has 404 response code', async () => {
   95 | //       expect(response.status()).toBe(404);
   96 | //     });
   97 | //   });
   98 |
   99 | // //   // POST create new book
  100 |
  101 | test('POST Book debug', async () => {
  102 |   const api = new BaseApi();
  103 |   await api.initContext();
  104 |
  105 |   const payload = {
  106 |     id: 0,
  107 |     title: 'string',
  108 |     description: 'string',
  109 |     pageCount: 0,
  110 |     excerpt: 'string',
  111 |     publishDate: new Date().toISOString()
  112 |   };
  113 |
  114 |   const config = api.buildRequestConfiguration(Method.POST, 'Books', { payload });
  115 |
  116 |   const response = await api.sendRequest(config);
  117 |
  118 |   const text = await response.text();
  119 |   console.log('🔍 TEXT:', text);
  120 |   console.log('🔢 STATUS:', response.status());
  121 |
> 122 |   expect(response.status()).toBe(200);
      |                             ^ Error: expect(received).toBe(expected) // Object.is equality
  123 | });
  124 |
  125 | //   // PUT update existing book
  126 | //   test.describe(`${Method.PUT} ${endpoint} by ID`, () => {
  127 | //     let api: BaseApi;
  128 | //     let repository: BooksApi;
  129 | //     let response;
  130 | //     let updatedPayload;
  131 |
  132 | //     test.beforeAll(async () => {
  133 | //       api = new BaseApi();
  134 | //       await api.initContext();
  135 |
  136 | //       repository = new BooksApi();
  137 | //       const existingBook = repository.loadBooks()[0];
  138 |
  139 | //       updatedPayload = repository.generateBookPayload({
  140 | //         id: existingBook.id,
  141 | //         title: 'Updated Title'
  142 | //       });
  143 |
  144 | //       const config = api.buildRequestConfiguration(Method.PUT, endpoint, {
  145 | //         id: existingBook.id,
  146 | //         payload: updatedPayload
  147 | //       });
  148 |
  149 | //       response = await api.sendRequest(config);
  150 | //     });
  151 |
  152 | //     test('has 200 response code', async () => {
  153 | //       expect(response.status()).toBe(200);
  154 | //     });
  155 |
  156 | //     test('has updated title in response', async () => {
  157 | //       const data = await response.json();
  158 | //       expect(data.title).toBe(updatedPayload.title);
  159 | //     });
  160 | //   });
  161 |
  162 | //   // DELETE book by ID
  163 | //   test.describe(`${Method.DELETE} ${endpoint} by ID`, () => {
  164 | //     let api: BaseApi;
  165 | //     let repository: BooksApi;
  166 | //     let response;
  167 | //     let createdBookId;
  168 |
  169 | //     test.beforeAll(async () => {
  170 | //       api = new BaseApi();
  171 | //       await api.initContext();
  172 |
  173 | //       repository = new BooksApi();
  174 | //       const bookToDelete = repository.generateBookPayload();
  175 |
  176 | //       const postConfig = api.buildRequestConfiguration(Method.POST, endpoint, { payload: bookToDelete });
  177 | //       const postResponse = await api.sendRequest(postConfig);
  178 | //       const createdBook = await postResponse.json();
  179 | //       createdBookId = createdBook.id;
  180 |
  181 | //       const deleteConfig = api.buildRequestConfiguration(Method.DELETE, endpoint, { id: createdBookId });
  182 | //       response = await api.sendRequest(deleteConfig);
  183 | //     });
  184 |
  185 | //     test('has 200 response code', async () => {
  186 | //       expect(response.status()).toBe(200);
  187 | //     });
  188 |
  189 | //     test('book is no longer retrievable', async () => {
  190 | //       const getConfig = api.buildRequestConfiguration(Method.GET, endpoint, { id: createdBookId });
  191 | //       const getResponse = await api.sendRequest(getConfig);
  192 | //       expect(getResponse.status()).toBe(404);
  193 | //     });
  194 | //   });
  195 | // });
  196 |
```