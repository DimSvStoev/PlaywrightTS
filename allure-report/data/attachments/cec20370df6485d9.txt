# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Endpoint /Books >> GET all Books >> has 200 response code
- Location: C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\get-books.spec.ts:25:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 200
Received: 404
    at C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\get-books.spec.ts:26:33
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { BaseApi } from '../src/api/base-api';
   3 | import { BooksApi } from '../src/api/books-api';
   4 | import { Endpoint, Method } from '../src/constants/api-const';
   5 |
   6 | test.describe(`Endpoint /${Endpoint.BOOKS}`, () => {
   7 |   let api: BaseApi;
   8 |   let repository: BooksApi;
   9 |   const endpoint = Endpoint.BOOKS;
  10 |
  11 |   test.beforeAll(async () => {
  12 |     api = new BaseApi();
  13 |     repository = new BooksApi();
  14 |     await api.initContext();
  15 |   });
  16 |
  17 |   test.describe(`${Method.GET} all ${endpoint}`, () => {
  18 |     let response;
  19 |
  20 |     test.beforeAll(async () => {
  21 |       const config = api.buildRequestConfiguration(Method.GET, endpoint);
  22 |       response = await api.sendRequest(config);
  23 |     });
  24 |
  25 |     test('has 200 response code', async () => {
> 26 |       expect(response.status()).toBe(200);
     |                                 ^ Error: expect(received).toBe(expected) // Object.is equality
  27 |     });
  28 |
  29 |     test('has response data as a non-empty array', async () => {
  30 |       const data = await response.json();
  31 |       expect(Array.isArray(data)).toBe(true);
  32 |       expect(data.length).toBeGreaterThan(0);
  33 |     });
  34 |   });
  35 |
  36 |   test.describe(`${Method.GET} ${endpoint} by ID`, () => {
  37 |     let response;
  38 |     let existingBook;
  39 |
  40 |     test.beforeAll(async () => {
  41 |       existingBook = repository.loadBooks()[0];
  42 |       const config = api.buildRequestConfiguration(Method.GET, endpoint, { id: existingBook.id });
  43 |       response = await api.sendRequest(config);
  44 |     });
  45 |
  46 |     test('has 200 response code', async () => {
  47 |       expect(response.status()).toBe(200);
  48 |     });
  49 |
  50 |     test('has all fields matching existing book', async () => {
  51 |       const data = await response.json();
  52 |       for (const key of Object.keys(existingBook)) {
  53 |         expect(data[key]).toBe(existingBook[key]);
  54 |       }
  55 |     });
  56 |   });
  57 |
  58 |   test.describe(`${Method.GET} ${endpoint} by non-existing ID`, () => {
  59 |     let response;
  60 |
  61 |     test.beforeAll(async () => {
  62 |       const config = api.buildRequestConfiguration(Method.GET, endpoint, { id: -999 });
  63 |       response = await api.sendRequest(config);
  64 |     });
  65 |
  66 |     test('has 404 response code', async () => {
  67 |       expect(response.status()).toBe(404);
  68 |     });
  69 |   });
  70 | });
  71 |
```