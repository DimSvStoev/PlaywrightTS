# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: 🔐 Data-Driven Login Form Tests >> Login #4: "test" should fail
- Location: C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\ui tests\login.spec.ts:24:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: "Epic sadface: Username and password do not match any user in this service"
Received: {Symbol(async_id_symbol): 1155, Symbol(trigger_async_id_symbol): 1008, Symbol(kResourceStore): undefined}
    at C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\ui tests\login.spec.ts:30:55
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { LoginPage } from '../../src/pages/loginPage';
   3 | import path from 'path';
   4 | import { JsonFileReader } from '../../src/utils/data-reader';
   5 |
   6 | const dataFile = path.resolve(__dirname, '../../src/test-data/UI-testData.json');
   7 | const fileReader = new JsonFileReader();
   8 |
   9 | interface TestUser {
  10 |   username: string | null;
  11 |   password: string;
  12 |   shouldLogin?: boolean;
  13 |   message?: string;
  14 | }
  15 |
  16 | interface TypeOfTestData {
  17 |   users: TestUser[];
  18 | }
  19 |
  20 | const testData = fileReader.readFile(dataFile) as TypeOfTestData;
  21 |
  22 | test.describe('🔐 Data-Driven Login Form Tests', () => {
  23 |   testData.users.forEach((user, index) => {
  24 |     test(`Login #${index + 1}: "${user.username ?? '<empty>'}" should ${user.shouldLogin ? 'succeed' : 'fail'}`, async ({ page }) => {
  25 |       const loginPage = new LoginPage(page);
  26 |       await loginPage.goToLoginPage();
  27 |       await loginPage.login(user.username ?? '', user.password);
  28 |
  29 |       if (user.shouldLogin == false) {
> 30 |         await expect(loginPage.getErrorMessagetext()).toBe(user.message);
     |                                                       ^ Error: expect(received).toBe(expected) // Object.is equality
  31 |       } else {
  32 |
  33 |       }
  34 |     });
  35 |   });
  36 | });
  37 |
```