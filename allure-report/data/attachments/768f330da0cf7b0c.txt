# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: addElementToCart >> Remove all cart items from reset app state funcitonality
- Location: C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\ui tests\login.spec.ts:65:7

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: 6
Received: 0
    at C:\Users\dimitar.stoev\Desktop\interview framework\AllWynPlaywright\project-root\tests\ui tests\login.spec.ts:71:50
```

# Test source

```ts
   1 | import { test, expect } from '@playwright/test';
   2 | import { LoginPage } from '../../src/pages/loginPage';
   3 | import { MainPage } from '../../src/pages/MainPage';
   4 | import path from 'path';
   5 | import { JsonFileReader } from '../../src/utils/data-reader';
   6 |
   7 | const dataFile = path.resolve(__dirname, '../../src/test-data/UI-testData.json');
   8 | const fileReader = new JsonFileReader();
   9 |
  10 | interface TestUser {
  11 |   username: string;
  12 |   password: string;
  13 |   shouldLogin?: boolean;
  14 |   message?: string;
  15 | }
  16 |
  17 | interface TypeOfTestData {
  18 |   users: TestUser[];
  19 | }
  20 |
  21 | const testData = fileReader.readFile(dataFile) as TypeOfTestData;
  22 |
  23 | test.describe('🔐 Data-Driven Login Form Tests', () => {
  24 |   testData.users.forEach((user, index) => {
  25 |     test(`Login #${index + 1}: "${user.username ?? '<empty>'}" should ${user.shouldLogin ? 'succeed' : 'fail'}`, async ({ page }) => {
  26 |       const loginPage = new LoginPage(page);
  27 |       const mainPage = new MainPage(page);
  28 |       await loginPage.goToLoginPage();
  29 |       await loginPage.login(user.username, user.password);
  30 |
  31 |       if (user.shouldLogin == false) {
  32 |         expect(await loginPage.getErrorMessagetext()).toBe(user.message);
  33 |       } else {
  34 |         expect(await mainPage.getLogoText()).toBe('Swag Labs');
  35 |       }
  36 |     });
  37 |   });
  38 | });
  39 |
  40 | test.describe('addElementToCart', () => {
  41 |   test.beforeEach(async ({ page }) => {
  42 |     const loginPage = new LoginPage(page);
  43 |     await loginPage.goToLoginPage();
  44 |     await loginPage.login('standard_user', 'secret_sauce');
  45 |   });
  46 |
  47 |   test('Add all elements to cart', async ({ page }) => {
  48 |     const mainPage = new MainPage(page);
  49 |     const addCartButtonCounter:number = await mainPage.addCartButton.count();
  50 |     await mainPage.clickAllButtons(mainPage.addCartButton);
  51 |     expect(await mainPage.removeCartButton.count()).toBe(addCartButtonCounter);
  52 |     expect(parseInt( await mainPage.getShopCartIndicatorText())).toBe(addCartButtonCounter);
  53 |   });
  54 |
  55 |   test('Remove all cart items from remove button', async ({ page }) => {
  56 |     const mainPage = new MainPage(page);
  57 |     const addCartButtonCounter:number = await mainPage.addCartButton.count();
  58 |     await mainPage.clickAllButtons(mainPage.addCartButton);
  59 |     await mainPage.clickAllButtons(mainPage.removeCartButton);
  60 |
  61 |     expect(await mainPage.addCartButton.count()).toBe(addCartButtonCounter);
  62 |     expect(await mainPage.shopCartIndicator).toBeHidden();
  63 |   });
  64 |
  65 |   test('Remove all cart items from reset app state funcitonality', async ({ page }) => {
  66 |     const mainPage = new MainPage(page);
  67 |     const addCartButtonCounter:number = await mainPage.addCartButton.count();
  68 |     await mainPage.clickAllButtons(mainPage.addCartButton);
  69 |     await mainPage.resetAppState();
  70 |
> 71 |     expect(await mainPage.addCartButton.count()).toBe(addCartButtonCounter);
     |                                                  ^ Error: expect(received).toBe(expected) // Object.is equality
  72 |     expect(await mainPage.shopCartIndicator).toBeHidden();
  73 |   });
  74 | });
```